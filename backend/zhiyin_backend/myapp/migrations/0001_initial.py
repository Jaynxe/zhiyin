# Generated by Django 5.2.1 on 2025-05-29 08:38

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Advertise',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='广告', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='广告标题', max_length=100, null=True)),
                ('cover', models.ImageField(help_text='广告图片', null=True, upload_to='advertise/')),
                ('link', models.CharField(blank=True, help_text='广告链接', max_length=500, null=True)),
                ('status', models.CharField(choices=[('0', '已发布'), ('1', '已下线')], default='0', help_text='广告状态', max_length=2)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('update_time', models.DateTimeField(auto_now=True, help_text='更新时间', null=True)),
            ],
            options={
                'verbose_name': '广告管理',
                'verbose_name_plural': '广告管理',
                'db_table': 'advertise',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('id', models.BigAutoField(help_text='分类ID', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='分类名称', max_length=100, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('update_time', models.DateTimeField(auto_now=True, help_text='更新时间', null=True)),
            ],
            options={
                'db_table': 'classification',
            },
        ),
        migrations.CreateModel(
            name='LoginLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='日志ID', primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, help_text='登录用户名', max_length=50, null=True)),
                ('ip', models.CharField(blank=True, help_text='登录IP地址', max_length=100, null=True)),
                ('location', models.CharField(blank=True, help_text='登录地点', max_length=100, null=True)),
                ('ua', models.CharField(blank=True, help_text='用户代理', max_length=200, null=True)),
                ('log_time', models.DateTimeField(auto_now_add=True, help_text='登录时间', null=True)),
            ],
            options={
                'verbose_name': '登录日志',
                'verbose_name_plural': '登录日志',
                'db_table': 'login_log',
                'ordering': ['-log_time'],
            },
        ),
        migrations.CreateModel(
            name='SystemNotice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='通知ID', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='通知标题', max_length=100)),
                ('content', models.TextField(help_text='通知内容')),
                ('status', models.CharField(choices=[('0', '发布'), ('1', '下线')], default='0', help_text='通知状态', max_length=2)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
            ],
            options={
                'verbose_name': '系统通知',
                'verbose_name_plural': '系统通知',
                'db_table': 'system_notice',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='用户唯一标识', primary_key=True, serialize=False)),
                ('username', models.CharField(help_text='用户名', max_length=50, null=True)),
                ('password', models.CharField(help_text='密码', max_length=50, null=True)),
                ('role', models.CharField(blank=True, choices=[('0', '管理员'), ('1', '普通用户')], default='1', help_text='用户角色', max_length=2, null=True)),
                ('status', models.CharField(choices=[('0', '正常'), ('1', '封号')], default='0', help_text='用户状态', max_length=1)),
                ('nickname', models.CharField(blank=True, help_text='昵称', max_length=20, null=True)),
                ('avatar', models.ImageField(blank=True, default='avatar/default.png', help_text='用户头像', null=True, upload_to='avatar/')),
                ('avatarHash', models.CharField(blank=True, help_text='头像哈希值', max_length=32, null=True)),
                ('mobile', models.CharField(blank=True, help_text='手机号', max_length=13, null=True)),
                ('email', models.CharField(blank=True, help_text='邮箱', max_length=50, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', '男'), ('F', '女')], help_text='性别', max_length=1, null=True)),
                ('description', models.TextField(help_text='个人描述', max_length=200, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('update_time', models.DateTimeField(auto_now=True, help_text='更新时间', null=True)),
                ('push_switch', models.BooleanField(blank=True, default=False, help_text='推送开关', null=True)),
            ],
            options={
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='歌曲ID', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='歌曲标题', max_length=100, null=True)),
                ('cover', models.ImageField(help_text='歌曲封面', null=True, upload_to='cover/')),
                ('source', models.FileField(help_text='音频文件', null=True, upload_to='source/')),
                ('description', models.TextField(blank=True, help_text='歌曲描述', max_length=1000, null=True)),
                ('singer', models.CharField(blank=True, help_text='演唱者', max_length=50, null=True)),
                ('language', models.CharField(blank=True, help_text='语言', max_length=50, null=True)),
                ('album', models.CharField(blank=True, help_text='所属专辑', max_length=50, null=True)),
                ('issuer', models.CharField(blank=True, help_text='发行方', max_length=50, null=True)),
                ('status', models.CharField(choices=[('0', '上架'), ('1', '下架')], default='0', help_text='状态', max_length=1)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('plays', models.IntegerField(default=0, help_text='播放次数')),
                ('recommend_count', models.IntegerField(default=0, help_text='推荐数')),
                ('like_count', models.IntegerField(default=0, help_text='点赞数')),
                ('collect_count', models.IntegerField(default=0, help_text='收藏数')),
                ('classification', models.ForeignKey(blank=True, help_text='所属分类', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='classification_song', to='myapp.classification')),
                ('collect', models.ManyToManyField(blank=True, help_text='收藏用户', related_name='collect_songs', to='myapp.user')),
                ('like', models.ManyToManyField(blank=True, help_text='点赞用户', related_name='like_songs', to='myapp.user')),
            ],
            options={
                'db_table': 'song',
            },
        ),
        migrations.CreateModel(
            name='Record',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='记录ID', primary_key=True, serialize=False)),
                ('score', models.IntegerField(default=0, help_text='得分')),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('song', models.ForeignKey(help_text='歌曲', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='song_record', to='myapp.song')),
                ('user', models.ForeignKey(help_text='用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_record', to='myapp.user')),
            ],
            options={
                'verbose_name': '用户-歌曲评分',
                'verbose_name_plural': '用户-歌曲评分',
                'db_table': 'record',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('order_number', models.CharField(blank=True, max_length=13, null=True)),
                ('count', models.IntegerField(default=0)),
                ('status', models.CharField(blank=True, max_length=2, null=True)),
                ('order_time', models.DateTimeField(auto_now_add=True, null=True)),
                ('receiver_name', models.CharField(blank=True, max_length=20, null=True)),
                ('receiver_address', models.CharField(blank=True, max_length=50, null=True)),
                ('receiver_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('remark', models.CharField(blank=True, max_length=30, null=True)),
                ('song', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='song_order', to='myapp.song')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_order', to='myapp.user')),
            ],
            options={
                'db_table': 'order',
            },
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='反馈ID', primary_key=True, serialize=False)),
                ('title', models.CharField(blank=True, help_text='反馈标题', max_length=100, null=True)),
                ('content', models.TextField(blank=True, help_text='反馈内容', max_length=1000, null=True)),
                ('feedback_screenshot', models.ImageField(blank=True, help_text='反馈截图', null=True, upload_to='feedback/')),
                ('email', models.EmailField(blank=True, help_text='联系邮箱', max_length=100, null=True)),
                ('status', models.CharField(blank=True, choices=[('0', '待处理'), ('1', '已处理')], default='0', help_text='反馈状态', max_length=2, null=True)),
                ('reply', models.TextField(blank=True, help_text='管理员回复', max_length=1000, null=True)),
                ('create_time', models.DateTimeField(auto_now_add=True, help_text='创建时间', null=True)),
                ('update_time', models.DateTimeField(auto_now=True, help_text='处理时间', null=True)),
                ('user', models.ForeignKey(help_text='反馈用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_feedback', to='myapp.user')),
            ],
            options={
                'verbose_name': '用户反馈',
                'verbose_name_plural': '用户反馈',
                'db_table': 'feedback',
                'ordering': ['-create_time'],
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='评论ID', primary_key=True, serialize=False)),
                ('content', models.TextField(blank=True, help_text='评论内容', max_length=1000, null=True)),
                ('comment_time', models.DateTimeField(auto_now_add=True, help_text='评论时间', null=True)),
                ('like_count', models.IntegerField(default=0, help_text='点赞数')),
                ('status', models.CharField(choices=[('0', '正常'), ('1', '已删除')], default='0', help_text='评论状态', max_length=1)),
                ('level', models.IntegerField(default=0, help_text='评论层级')),
                ('parent', models.ForeignKey(blank=True, help_text='父评论', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='myapp.comment')),
                ('song', models.ForeignKey(help_text='评论歌曲', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='song_comment', to='myapp.song')),
                ('user', models.ForeignKey(help_text='评论用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_comment', to='myapp.user')),
            ],
            options={
                'db_table': 'comment',
                'ordering': ['-comment_time'],
            },
        ),
        migrations.CreateModel(
            name='BrowseHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='浏览记录ID', primary_key=True, serialize=False)),
                ('browse_time', models.DateTimeField(auto_now_add=True, help_text='浏览时间', null=True)),
                ('song', models.ForeignKey(help_text='歌曲', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='browse_history', to='myapp.song')),
                ('user', models.ForeignKey(help_text='用户', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='browse_history', to='myapp.user')),
            ],
            options={
                'verbose_name': '浏览记录',
                'verbose_name_plural': '浏览记录',
                'db_table': 'browse_history',
                'ordering': ['-browse_time'],
            },
        ),
        migrations.CreateModel(
            name='UserNotice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='用户日志ID', primary_key=True, serialize=False)),
                ('is_read', models.BooleanField(default=False, help_text='是否已读')),
                ('receive_time', models.DateTimeField(auto_now_add=True)),
                ('notice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.systemnotice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.user')),
            ],
            options={
                'verbose_name': '用户通知',
                'verbose_name_plural': '用户通知',
                'db_table': 'user_notice',
                'unique_together': {('notice', 'user')},
            },
        ),
    ]
